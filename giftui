--// Services
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer

-- Kick if in private server
pcall(function()
	if TeleportService:IsPrivateServer() then
		player:Kick("Duping on Private Servers are Not Allowed! Please Join a Public Server.")
	end
end)

--// ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true

--// Helper: Rounded corners
local function roundify(obj, rad)
	local c = Instance.new("UICorner")
	c.CornerRadius = UDim.new(0, rad)
	c.Parent = obj
end

--// Helper: Tween fade
local function fade(obj, dir, dur)
	local goal = {TextTransparency = dir == "in" and 0 or 1}
	local tween = TweenService:Create(obj, TweenInfo.new(dur, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), goal)
	tween:Play()
end

--// Helper: Typing effect
local function typeText(label, text, speed)
	label.Text = ""
	for i = 1, #text do
		label.Text = string.sub(text, 1, i)
		task.wait(speed)
	end
end

--// Main Force Gift UI
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 150)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.Active = true
frame.Draggable = true
frame.Parent = screenGui
roundify(frame, 12)

-- Use UIListLayout inside frame for consistent vertical layout
local layout = Instance.new("UIListLayout")
layout.Parent = frame
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Padding = UDim.new(0, 10)
layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
layout.VerticalAlignment = Enum.VerticalAlignment.Top
layout.FillDirection = Enum.FillDirection.Vertical

-- Title
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 40)
title.BackgroundTransparency = 1
title.Text = "Select Target"
title.TextColor3 = Color3.fromRGB(255,255,255)
title.Font = Enum.Font.Cartoon
title.TextSize = 22
title.LayoutOrder = 1
title.Parent = frame

-- Dropdown Button
local dropdown = Instance.new("TextButton")
dropdown.Size = UDim2.new(0, 180, 0, 30)
dropdown.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
dropdown.Text = "Select Player"
dropdown.TextColor3 = Color3.fromRGB(255,255,255)
dropdown.Font = Enum.Font.Cartoon
dropdown.TextSize = 18
dropdown.ZIndex = 2
dropdown.LayoutOrder = 2
dropdown.Parent = frame
roundify(dropdown, 10)

local selectedPlayer = nil

-- Dropdown Frame
local dropdownFrame = Instance.new("Frame")
dropdownFrame.Size = UDim2.new(0, 180, 0, 120)
dropdownFrame.Position = UDim2.new(0, 0, 1, 0)
dropdownFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
dropdownFrame.Visible = false
dropdownFrame.ZIndex = 3
dropdownFrame.Parent = dropdown
roundify(dropdownFrame, 10)

local listLayout = Instance.new("UIListLayout")
listLayout.Parent = dropdownFrame
listLayout.SortOrder = Enum.SortOrder.LayoutOrder

-- Gift Now Button
local giftBtn = Instance.new("TextButton")
giftBtn.Size = UDim2.new(0, 180, 0, 30)
giftBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
giftBtn.Text = "Gift Now"
giftBtn.TextColor3 = Color3.fromRGB(255,255,255)
giftBtn.Font = Enum.Font.Cartoon
giftBtn.TextSize = 20
giftBtn.ZIndex = 1
giftBtn.LayoutOrder = 3
giftBtn.Parent = frame
roundify(giftBtn, 10)

-- Fill dropdown with players
local function refreshPlayers()
	for _, child in ipairs(dropdownFrame:GetChildren()) do
		if child:IsA("TextButton") then child:Destroy() end
	end
	for _, plr in ipairs(Players:GetPlayers()) do
		if plr ~= player then
			local btn = Instance.new("TextButton")
			btn.Size = UDim2.new(1, 0, 0, 30)
			btn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
			btn.Text = plr.Name
			btn.TextColor3 = Color3.fromRGB(255,255,255)
			btn.Font = Enum.Font.Cartoon
			btn.TextSize = 18
			btn.ZIndex = 4
			btn.Parent = dropdownFrame
			btn.MouseButton1Click:Connect(function()
				selectedPlayer = plr.Name
				dropdown.Text = plr.Name
				dropdownFrame.Visible = false
			end)
			roundify(btn, 8)
		end
	end
end

dropdown.MouseButton1Click:Connect(function()
	refreshPlayers()
	dropdownFrame.Visible = not dropdownFrame.Visible
end)

-- Notification container (top center)
local notifContainer = Instance.new("Frame")
notifContainer.Size = UDim2.new(0, 300, 0, 50)
notifContainer.Position = UDim2.new(0.5, 0, 0, 10)
notifContainer.AnchorPoint = Vector2.new(0.5, 0)
notifContainer.BackgroundTransparency = 1
notifContainer.Parent = screenGui

local notifLayout = Instance.new("UIListLayout")
notifLayout.Parent = notifContainer
notifLayout.SortOrder = Enum.SortOrder.LayoutOrder
notifLayout.Padding = UDim.new(0, 5)
notifLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
notifLayout.VerticalAlignment = Enum.VerticalAlignment.Top

local activeNotifs = {}

local function showNotification(text)
	-- Limit to 2 notifications
	if #activeNotifs >= 2 then
		-- Remove oldest notification immediately
		local oldest = table.remove(activeNotifs, 1)
		if oldest then
			oldest:Destroy()
		end
	end

	local notif = Instance.new("TextLabel")
	notif.Size = UDim2.new(1, 0, 0, 30)
	notif.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
	notif.TextColor3 = Color3.fromRGB(255, 255, 255)
	notif.Font = Enum.Font.Cartoon
	notif.TextSize = 18
	notif.Text = text
	notif.BackgroundTransparency = 0.2
	notif.Parent = notifContainer
	roundify(notif, 8)

	table.insert(activeNotifs, notif)

	-- Tween fade out after 1.5 seconds
	task.delay(1.5, function()
		local tween = TweenService:Create(notif, TweenInfo.new(0.5), {BackgroundTransparency = 1, TextTransparency = 1})
		tween:Play()
		tween.Completed:Wait()
		notif:Destroy()
		-- Remove from activeNotifs
		for i, v in ipairs(activeNotifs) do
			if v == notif then
				table.remove(activeNotifs, i)
				break
			end
		end
	end)
end

--// Central popup builder (Loading/Error/Retry UIs)
local function createPopup(text, duration, typingSpeed, showCountdown, showProgress)
	local ui = Instance.new("Frame")
	ui.AnchorPoint = Vector2.new(0.5,0.5)
	ui.Position = UDim2.new(0.5,0,0.5,0)
	ui.Size = UDim2.new(0, 300, 0, 140)
	ui.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	ui.Parent = screenGui
	roundify(ui, 12)

	local label = Instance.new("TextLabel")
	label.AnchorPoint = Vector2.new(0.5,0)
	label.Position = UDim2.new(0.5, 0, 0, 15)
	label.BackgroundTransparency = 1
	label.Text = ""
	label.TextColor3 = Color3.fromRGB(255,255,255)
	label.Font = Enum.Font.Cartoon
	label.TextSize = 22
	label.Parent = ui

	label.TextTransparency = 1
	fade(label, "in", 0.5)
	typeText(label, text, typingSpeed or 0.05)

	local countdownLabel
	if showCountdown then
		countdownLabel = Instance.new("TextLabel")
		countdownLabel.AnchorPoint = Vector2.new(0.5,0)
		countdownLabel.Position = UDim2.new(0.5,0,0, 90)
		countdownLabel.BackgroundTransparency = 1
		countdownLabel.TextColor3 = Color3.fromRGB(255,255,255)
		countdownLabel.Font = Enum.Font.Cartoon
		countdownLabel.TextSize = 18
		countdownLabel.Parent = ui
	end

	local progressBarBackground, progressBarFill
	if showProgress then
		-- Progress bar background
		progressBarBackground = Instance.new("Frame")
		progressBarBackground.Size = UDim2.new(0, 260, 0, 20)
		progressBarBackground.Position = UDim2.new(0.5, 0, 0, 70)
		progressBarBackground.AnchorPoint = Vector2.new(0.5, 0)
		progressBarBackground.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
		progressBarBackground.Parent = ui
		roundify(progressBarBackground, 10)

		-- Progress bar fill
		progressBarFill = Instance.new("Frame")
		progressBarFill.Size = UDim2.new(0, 0, 1, 0) -- start empty
		progressBarFill.BackgroundColor3 = Color3.fromRGB(100, 255, 100)
		progressBarFill.Parent = progressBarBackground
		roundify(progressBarFill, 10)
	end

	-- Timing logic
	if showProgress and progressBarFill then
		local startTime = os.clock()
		while os.clock() - startTime < duration do
			local elapsed = os.clock() - startTime
			local progress = math.clamp(elapsed / duration, 0, 1)
			progressBarFill.Size = UDim2.new(progress, 0, 1, 0)
			if countdownLabel then
				local remaining = math.ceil(duration - elapsed)
				countdownLabel.Text = "Closing in "..remaining.."..."
			end
			task.wait(0.1)
		end
	else
		if showCountdown and countdownLabel then
			for i = duration, 1, -1 do
				countdownLabel.Text = "Closing in "..i.."..."
				task.wait(1)
			end
		else
			task.wait(duration or 5)
		end
	end

	fade(label, "out", 0.5)
	if countdownLabel then fade(countdownLabel,"out",0.5) end
	if progressBarFill then
		local tween = TweenService:Create(progressBarFill, TweenInfo.new(0.5), {Size = UDim2.new(1, 0, 1, 0)})
		tween:Play()
		tween.Completed:Wait()
	end
	task.wait(0.5)
	ui:Destroy()
end

--// Gift Now Clicked (with target check and notification)
giftBtn.MouseButton1Click:Connect(function()
	if not selectedPlayer then
		showNotification("Please select a target player!")
		return
	end

	frame:Destroy() -- close force gift UI

	-- Loading sequence with progress bar
	local steps = {"Please Wait","Checking Target Inventory","Initiating","Completed"}
	for _, step in ipairs(steps) do
		createPopup(step, 3, 0.07, false, true) -- showProgress = true
	end

	-- Error UI with 5 seconds countdown
	createPopup("Error Please Try Again!", 5, 0.07, true, false)

	-- Retry UI with 5 seconds countdown
	createPopup("Execute the Script to Try Again.", 5, 0.07, true, false)
end)
